/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.flywaydb.flyway" version "10.11.0"
}

group = 'books-service'
version = '1.0'

springBoot {
    buildInfo()
}

ext {
    JAXB_API_VERSION = "4.0.2"
    JAXB_CORE_VERSION = "4.0.5"
    JAKARTA_VALIDATION_API_VERSION = "3.0.2"
    ASSERTJ_VERSION = '3.25.2'
    LOGSTASH_LOGBACK_ENCODER_VERSION = "7.4"
    MAPSTRUCT_VERSION = "1.6.0.Beta1"
    FLYWAY_VERSION = "10.11.0"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
    google()
}


dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "jakarta.validation:jakarta.validation-api:${JAKARTA_VALIDATION_API_VERSION}"
    implementation "net.logstash.logback:logstash-logback-encoder:${LOGSTASH_LOGBACK_ENCODER_VERSION}"
    implementation "org.flywaydb:flyway-mysql"

    compileOnly "org.projectlombok:lombok"

    testRuntimeOnly "com.h2database:h2"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"

    annotationProcessor "org.projectlombok:lombok"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.assertj:assertj-core:${ASSERTJ_VERSION}"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'books.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'books-service.jar'
}

bootRun {
    String activeProfile =  System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

// This section causes useful test output to go to the terminal.
test {
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // Change to `true` for more verbose test output
        showStandardStreams = false
    }
}